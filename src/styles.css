:root {
  /* Palette */
  --bg: #f7f7f9;
  --card: #ffffff;
  --text: #0f172a;         /* slate-900 */
  --muted: #64748b;        /* slate-500 */
  --border: #e5e7eb;       /* gray-200 */
  --ring: #93c5fd;         /* sky-300 */
  --accent: #2563eb;       /* blue-600 */

  --green: #16a34a;        /* start */
  --red: #ef4444;          /* goal */
  --amber: #f59e0b;        /* current node ring */

  /* Surfaces & depth */
  --radius: 14px;
  --radius-sm: 10px;
  --shadow-sm: 0 1px 2px rgba(0,0,0,.06), 0 1px 1px rgba(0,0,0,.04);
  --shadow-md: 0 8px 24px rgba(15, 23, 42, .08);
  --shadow-lg: 0 14px 40px rgba(15, 23, 42, .10);

  --panel-w: clamp(560px, 56vw, 1120px);
}

@media (prefers-color-scheme: dark) {
  :root {
    --bg: #0b1220;
    --card: #0e1726;
    --text: #e5e7eb;
    --muted: #94a3b8;
    --border: #1f2937;
    --ring: #60a5fa;
    --accent: #60a5fa;

    --green: #22c55e;
    --red: #f43f5e;
    --amber: #fbbf24;
  }
}

* { box-sizing: border-box; }
html, body { height: 100%; }

body {
  margin: 0;
  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
  color: var(--text);
  background:
    radial-gradient(1200px 800px at 20% -10%, rgba(37,99,235,0.06), transparent 60%),
    radial-gradient(1000px 600px at 110% 10%, rgba(34,197,94,0.06), transparent 60%),
    var(--bg);
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* ----- Layout containers -------------------------------------------------- */
header{
  width: 100%;
  max-width: 1280px;
  padding: 1.25rem 1.25rem 0.75rem;
  position: relative;
}

h1 {
  margin: 0 0 .75rem 0;
  font-size: 1.25rem;
  font-weight: 700;
  letter-spacing: .2px;
}

/* Toolbar / controls card */
.controls {
  background: var(--card);
  border: 1px solid var(--border);
  box-shadow: var(--shadow-sm);
  border-radius: var(--radius);
  padding: .75rem;
  display: grid;
  grid-template-columns: 1fr auto auto auto auto;
  gap: .5rem .5rem;
  align-items: center;
}

/* Pause/Step group with Reset spanning both (maze only) */
.psControlsGrid {
  display: contents; /* allow inner buttons to participate in main grid by default */
}
.maze .psControlsGrid {
  display: grid;
  grid-template-columns: auto auto; /* Pause | Step */
  gap: .5rem;
  grid-column: 3 / 6; /* occupy alg col (2) already used; place starting at play (3)? adjust if needed */
  align-items: center;
}
.maze .psControlsGrid > button { width: 100%; }
.maze .psControlsGrid .resetSpan {
  grid-column: 1 / 3; /* span pause+step widths */
}
@media (max-width:960px){
  .maze .psControlsGrid { grid-column: 1 / -1; grid-template-columns: 1fr 1fr; }
  .maze .psControlsGrid .resetSpan { grid-column: 1 / -1; }
}

@media (max-width: 960px) {
  .controls { grid-template-columns: 1fr 1fr; }
}

@media (max-width: 1200px){
  .controls{
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
    align-items: center;
  }

  /* Don’t let buttons become tiny pills */
  .controls button{ min-width: 96px; }

  /* Range should grow across its cell */
  .controls input[type="range"]{ width: 100%; }

  /* Put the “mode” strips and markers on their own rows and left-align them */
  .controls .modePanel,
  .controls .markerPanel{
    grid-column: 1 / -1;
    justify-content: flex-start;
    flex-wrap: wrap;
    gap: .5rem;
  }

  /* Reset button stays visible, not squeezed to the far right */
  .controls .resetFull{ justify-self: start; }
}

@media (max-width: 900px){
  .controls{ grid-template-columns: 1fr 1fr; }
}
@media (max-width: 560px){
  .controls{ grid-template-columns: 1fr; }
}


.controls label {
  color: var(--muted);
  font-size: .9rem;
  display: flex;
  align-items: center;
  gap: .35rem;
}

/* Grouping for mode-specific toolbars */
.controls .modePanel {
  display: none;
  gap: .5rem;
  align-items: center;
  justify-content: flex-end;
}
.controls .modePanel.visible { display: flex; }

/* Inputs --------------------------------------------------------------- */
select, input[type="number"], input[type="text"] {
  appearance: none;
  border: 1px solid var(--border);
  background: var(--card);
  color: var(--text);
  padding: .45rem .6rem;
  border-radius: 10px;
  font-size: .95rem;
  outline: none;
  transition: box-shadow .15s ease, border-color .15s ease;
}
select:focus, input[type="number"]:focus, input[type="text"]:focus {
  border-color: var(--accent);
  box-shadow: 0 0 0 3px color-mix(in srgb, var(--ring) 35%, transparent);
}

/* Buttons -------------------------------------------------------------- */
button {
  border: 1px solid var(--border);
  background: var(--card);
  color: var(--text);
  padding: .45rem .7rem;
  border-radius: 10px;
  font-size: .95rem;
  cursor: pointer;
  transition: transform .05s ease, box-shadow .15s ease, border-color .15s ease, background .15s ease;
  box-shadow: var(--shadow-sm);
  -webkit-tap-highlight-color: transparent; /* remove iOS/Safari gray flash */
}
button:hover { border-color: color-mix(in srgb, var(--accent) 30%, var(--border)); }
button:active { transform: translateY(1px); }
button:disabled { opacity: .5; cursor: not-allowed; }

/* Remove default focus ring / inner dot, we rely on border+shadow changes */
button:focus, button:focus-visible { outline: none; }
button::-moz-focus-inner { border: 0; }

/* Accent action look for Play / primary actions */
button.primary {
  background: linear-gradient(180deg, color-mix(in srgb, var(--accent) 14%, var(--card)), var(--card));
  border-color: color-mix(in srgb, var(--accent) 40%, var(--border));
}

/* Active toggles */
.modePanel button.active { background: color-mix(in srgb, var(--accent) 10%, var(--card)); border-color: color-mix(in srgb, var(--accent) 40%, var(--border)); }
#removeEdge.active { background: color-mix(in srgb, #ef4444 12%, var(--card)); }
#deleteNode.active { background: color-mix(in srgb, #ef4444 8%, var(--card)); }

/* Range (speed) -------------------------------------------------------- */
input[type="range"] {
  width: 160px;
  height: 2px;
  background: var(--border);
  border-radius: 999px;
  appearance: none;
  outline: none;
}
input[type="range"]::-webkit-slider-thumb {
  appearance: none;
  width: 14px; height: 14px; border-radius: 999px;
  background: var(--accent);
  border: 2px solid var(--card);
  box-shadow: 0 0 0 3px color-mix(in srgb, var(--ring) 30%, transparent);
}
input[type="range"]::-moz-range-thumb {
  width: 14px; height: 14px; border-radius: 999px;
  background: var(--accent);
  border: 2px solid var(--card);
}

/* Canvas / stage ------------------------------------------------------- */
main {
  position: relative;
  width: 100%;
  max-width: 1440px;
  padding: 1rem 1.25rem 2rem;
}

/* Stage layout: canvas left, info panel right; stacks when narrow */
.canvasWrap {
  display: grid;
  grid-template-columns: max-content minmax(520px, var(--panel-w));
  gap: .75rem;
  align-items: start;
  width: 100%;
}

/* Stack below when the container is too narrow */
@media (max-width: 1200px){
  .canvasWrap { grid-template-columns: 1fr; }
}

/* default two-column row layout (no split) */
.canvasWrap {
  grid-template-areas: "canvas info";
}

/* when we need to split (move pseudocode under canvas only) */
.canvasWrap.splitInfo {
  grid-template-areas:
    "canvas info"
    "code   info";
  grid-auto-rows: auto;
}

/* final fallback: stack everything below canvas */
.canvasWrap.stackInfo {
  grid-template-areas:
    "canvas"
    "info"
    "code";
  grid-template-columns: 1fr;
}

/* on narrow screens (everything below) */
@media (max-width: 1200px){
  .canvasWrap {
    grid-template-areas:
      "canvas"
      "info"
      "code";
  }
}

@media (max-width: 1360px){
  .canvasWrap{ grid-template-columns: 1fr; }
  .canvasWrap{
    grid-template-areas:
      "canvas"
      "info"
      "code";
  }
  #infoPanel{
    width: 100%;
    flex: 1 1 100%;
    max-width: 100%;
    order: 2;
  }
  #infoPanel .code{ display: flex; }
  #codeBelow{ display: none; }
}

/* place items into the areas */
canvas      { grid-area: canvas; }
#infoPanel  { grid-area: info; }
#codeBelow  { grid-area: code; }


canvas {
  /* keep the visual styling */
  border: 1px solid var(--border);
  border-radius: var(--radius);
  background: var(--card);
  box-shadow: var(--shadow-md);
  cursor: crosshair;

  /* important: never scale the element */
  display: block;         /* avoid inline gaps */
  max-width: none;        /* prevent shrinking */
  justify-self: start;    /* don't stretch in CSS grid */
  align-self: start;
}

/* Settings panel ------------------------------------------------------- */
#settingsPanel {
  position: absolute;
  left: -180px; /* docks left of canvas on wide screens */
  top: .25rem;
  display: none;
  flex-direction: column;
  align-items: stretch;
  gap: .5rem;
  font-size: .9rem;
}
#settingsPanel.visible { display: flex; }
#settingsPanel { z-index: 3; }

@media (max-width: 1200px) {
  #settingsPanel { left: 0; top: -3.75rem; position: relative; }
}

#settingsToggle {
  border-radius: 999px;
  padding: .35rem .75rem;
  width: fit-content;
}

.settingsBox {
  display: none;
  flex-direction: column;
  gap: .5rem;
  padding: .75rem;
  background: var(--card);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  box-shadow: var(--shadow-sm);
}
.settingsBox.visible { display: flex; }

#rowsInput, #colsInput, #cellInput { width: 3.25rem; text-align: right; }
.settingsBox label { display: flex; justify-content: space-between; gap: .75rem; align-items: center; }



/* Marker panel --------------------------------------------------------- */
.markerPanel {
  display: flex;
  gap: .5rem;
  align-items: center;
  justify-content: flex-end;
}
.marker {
  user-select: none;
  cursor: grab;
  display: inline-flex;
  align-items: center;
  gap: .35rem;
  font-size: .95rem;
  padding: .3rem .5rem;
  border-radius: 12px;
  border: 1px dashed var(--border);
  background: var(--card);
}
.marker .box {
  width: 18px; height: 18px;
  border: 1px solid var(--border);
  border-radius: 4px;
}
.marker.used .box { opacity: .35; }
.marker.used { cursor: pointer; }

/* Info panel ----------------------------------------------------------- */
#infoPanel{
  position: relative;           /* no absolute offset off-screen */
  width: auto;
  flex: initial;   /* participate in flex layout */
  padding: .75rem .9rem;
  background: var(--card);
  border: 1px solid var(--border);
  box-shadow: var(--shadow-lg);
  border-radius: var(--radius);
  font-size: .9rem;             /* BASE info panel font size (adjust here to scale all inner text) */
  line-height: 1.45;
  overflow: hidden;             /* no inner horizontal scroll */
  display: grid;
  grid-template-rows: auto 1fr; /* header + content grid */
  gap: .5rem;
}

/* On wide screens, keep the panel beside the canvas and make it sticky */
@media (min-width: 1201px){
  #infoPanel{
    position: sticky;
    top: .5rem;
    align-self: flex-start;
    max-height: calc(100vh - 1rem); /* visible without off-screen overflow */
  }
}

/* On medium/narrow screens, stack below the canvas at full width */
@media (max-width: 1200px){
  #infoPanel{
    width: 100%;
    flex: 1 1 100%;
    max-width: 100%;
    order: 2;                  /* appear after canvas in flow */
  }
}

/* Info panel title */
#infoPanel .infoHeader h2{
  margin:.25rem 0 .25rem;
  font-size:1.05rem;            /* Algorithm title size */
}

/* Content grid: 2 columns on roomy widths */
#infoPanel .infoGrid{
   display: grid;
   grid-template-columns: 0.8fr 2.4fr;
   grid-template-rows: auto auto;   /* let rows grow to content */
   gap: .6rem;
   min-height: 0;
}

/* Cards */
#infoPanel .infoGrid > section{
  background: color-mix(in srgb, var(--card), transparent 4%);
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: .6rem .65rem;
  box-shadow: var(--shadow-sm);
  display: flex;
  flex-direction: column;
  min-height: 0;
  overflow: hidden;
  border-radius: 12px;
}

#infoPanel h3{
  margin:.1rem 0 .4rem;
  font-size:.95rem;             /* Section heading size (Need / How / Pseudocode) */
  color: var(--muted);
}

/* Grid placement */
#infoPanel .need { grid-area: 1 / 1 / 2 / 2; }
#infoPanel .how  { grid-area: 2 / 1 / 3 / 2; }
#infoPanel .code { grid-area: 1 / 2 / 3 / 3; }

/* Dynamic fit scaling for the two descriptive cards */
#infoPanel .need,
#infoPanel .how {
  --fit-scale: 1;
}

#infoPanel .need ul.bullet,
#infoPanel .how .howBody {
  font-size: calc(0.95rem * var(--fit-scale)); /* Descriptive text size (multiplied by --fit-scale if dynamic scaling applied) */
  line-height: calc(1.45 * var(--fit-scale));  /* Matching line height scaling */
}

/* Make sure these bodies can reflow and wrap cleanly */
#infoPanel ul.bullet,
#infoPanel .howBody {
  white-space: normal;
  overflow-wrap: anywhere;
  hyphens: auto;
}


/* Wrap text cleanly */
#infoPanel ul.bullet {
  padding-left: 0; 
  margin: 0; 
  list-style: none; 
  color: var(--text);
  overflow: visible;                 /* allow content to show */
  white-space: normal;
  overflow-wrap: anywhere;           /* break long tokens if needed */
  hyphens: auto;
}

#infoPanel .howBody{
  overflow: visible;              
  white-space: normal;
  text-wrap: pretty;
  overflow-wrap: anywhere;
  hyphens: auto;
}
/* Pseudocode block sizing & wrapping */
#infoPanel .code{ display:flex; min-height:0; }

#infoPanel .codeBlock{
  flex: 1 1 auto;
  margin: 0;

  /* keep lines intact + allow scrolling */
  white-space: pre;          /* was pre-wrap */
  overflow-x: auto;          /* horizontal scroll when needed */
  overflow-y: auto;          /* fix the overflow:-y typo */
  /* ✨ remove any later "overflow: hidden" line for this selector */

  word-break: normal;
  background: color-mix(in srgb, var(--card), transparent 6%);
  border: 1px dashed var(--border);
  padding: .6rem;
  border-radius: 10px;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  font-size: clamp(.72rem, 1.6vw, .78rem); /* Responsive pseudocode font: scales with viewport width (1.6vw) within min/max bounds */
  line-height: 1.35;
  
}

/* Single-column layout on narrow panels (phones/tablets) */
@media (max-width: 900px){
  #infoPanel .infoGrid{
    grid-template-columns: 1fr;
    grid-template-rows: auto auto auto;
  }
  #infoPanel .need { grid-area: 1 / 1 / 2 / 2; }
  #infoPanel .how  { grid-area: 2 / 1 / 3 / 2; }
  #infoPanel .code { grid-area: 3 / 1 / 4 / 2; }
}




#infoPanel h2{ margin:.25rem 0 .5rem; font-size:1.05rem; }

#infoPanel h3{ margin:.5rem 0 .35rem; font-size:.95rem; color: var(--muted); }

#infoPanel pre{
  white-space: pre-wrap;
  background: color-mix(in srgb, var(--card), transparent 8%);
  border: 1px dashed var(--border);
  padding: .5rem;
  border-radius: 10px;
  font-size: .85rem;
  overflow: auto;
}
#infoPanel ul.bullet {
  padding-left: 1.25rem;
  margin: 0;
  list-style-type: disc;
}


#infoPanel ul.bullet li { 
  margin: .15rem 0; 
  color: var(--text); 

}





/* When splitting: hide pseudocode inside side panel; show below-canvas copy */
.canvasWrap.splitInfo #infoPanel .code { display: none; }
#codeBelow { display: none; }                  /* default: hidden */
.canvasWrap.splitInfo #codeBelow { display: block; }

/* On narrow screens: show all sections inside the info panel, hide the below-canvas copy */
@media (max-width: 1200px){
  #infoPanel .code { display: flex; }
  #codeBelow { display: none; }
}

#codeBelow{
  background: color-mix(in srgb, var(--card), transparent 4%);
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: .6rem .65rem;
  box-shadow: var(--shadow-sm);
  font-size: .9rem;
}
#codeBelow h3{
  margin:.5rem 0 .35rem;
  font-size:.95rem;
  color: var(--muted);
}
/* reuse your existing .codeBlock styles */



/* Metrics (placeholder) */
#metrics { margin-top: .75rem; font-size: .9rem; color: var(--muted); }


/* ---- explicit theme overrides via body class ---- */
body.theme-light {
  --bg: #f7f7f9;
  --card: #ffffff;
  --text: #0f172a;
  --muted: #64748b;
  --border: #e5e7eb;
  --ring: #93c5fd;
  --accent: #2563eb;

  /* canvas-friendly */
  --grid-lines: rgba(229,231,235,.8);  /* light subtle grid */
  --wall: #0f172a;                     /* slate-900 */
}

body.theme-dark {
  --bg: #10192a;
  --card: #0e1726;
  --text: #e5e7eb;
  --muted: #94a3b8;
  --border: #1f2937;
  --ring: #60a5fa;
  --accent: #60a5fa;

  /* canvas-friendly */
  --grid-lines: rgba(148,163,184,.28); /* slate-400 @ ~28% */
  --wall: #334155;                     /* slate-700 for contrast on dark */
}

/* ---- theme toggle button (top-right) ---- */
.themeToggle {
  position: absolute;
  top: 10px;
  right: 12px;
  z-index: 5;
}
.themeToggle .iconBtn {
  border: 1px solid var(--border);
  background: var(--card);
  color: var(--text);
  border-radius: 999px;
  width: 36px; height: 36px;
  display: grid; place-items: center;
  box-shadow: 0 1px 2px rgba(0,0,0,.08);
  cursor: pointer;
}
.themeToggle .iconBtn:hover {
  border-color: color-mix(in srgb, var(--accent) 35%, var(--border));
}
/* Toggle buttons (Nodes mode): obvious pressed/depressed look */
.controls .modePanel .toggle {
  position: relative;
}

.controls .modePanel .toggle[aria-pressed="true"] {
  background: color-mix(in srgb, var(--accent) 16%, var(--card));
  border-color: color-mix(in srgb, var(--accent) 55%, var(--border));
  box-shadow:
    inset 0 2px 6px rgba(0,0,0,.18),
    inset 0 0 0 1px color-mix(in srgb, var(--accent) 25%, transparent),
    var(--shadow-sm);
  transform: translateY(1px);
}

/* Stronger danger tint for destructive modes */
.controls .modePanel #removeEdge[aria-pressed="true"] {
  background: color-mix(in srgb, #ef4444 15%, var(--card));
  border-color: color-mix(in srgb, #ef4444 55%, var(--border));
}
.controls .modePanel #deleteNode[aria-pressed="true"] {
  background: color-mix(in srgb, #ef4444 12%, var(--card));
  border-color: color-mix(in srgb, #ef4444 50%, var(--border));
}

/* Optional: tiny indicator dot when pressed */
.controls .modePanel .toggle[aria-pressed="true"]::after {
  content: "";
  position: absolute;
  right: 8px; top: 8px;
  width: 8px; height: 8px;
  border-radius: 999px;
  background: currentColor;
  opacity: .6;
}

body{
  background: var(--bg);
  min-height: 100svh;
  position: relative;
}
body::before{
  content:"";
  position: fixed; inset: 0;
  pointer-events: none;
  z-index: -1;
  background:
    radial-gradient(1200px 800px at 20% -10%, rgba(37,99,235,0.06), transparent 60%),
    radial-gradient(1000px 600px at 110% 10%, rgba(34,197,94,0.06), transparent 60%),
    var(--bg);
}
